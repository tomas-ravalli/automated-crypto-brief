import os
import smtplib
from email.message import EmailMessage
from coinbase.wallet.client import Client
from dotenv import load_dotenv
from datetime import date

# Load environment variables from .env file
load_dotenv()

# --- Configuration ---
COINBASE_API_KEY = os.getenv("COINBASE_API_KEY")
COINBASE_API_SECRET = os.getenv("COINBASE_API_SECRET")
SENDER_EMAIL = os.getenv("GMAIL_ADDRESS")
SENDER_PASSWORD = os.getenv("GMAIL_APP_PASSWORD")
RECIPIENT_EMAIL = os.getenv("RECIPIENT_EMAIL")
CURRENCY_PAIR = 'XRP-EUR' # Replace XRP by your currency

# --- Environment Variable for Purchase Prices ---
# Your .env file should contain a variable like this, with prices separated by semicolons:
# PURCHASE_PRICES="2.45;2.51;2.48"
PURCHASE_PRICES_STR = os.getenv("PURCHASE_PRICES")

def get_xrp_price(): # Replace XRP by your currency
    """Fetches the current XRP-EUR spot price from Coinbase.""" # Replace XRP by your currency
    try:
        client = Client(COINBASE_API_KEY, COINBASE_API_SECRET)
        price_data = client.get_spot_price(currency_pair=CURRENCY_PAIR)
        return float(price_data.amount)
    except Exception as e:
        print(f"Error fetching price: {e}")
        return None

def calculate_average_purchase_price(prices_str):
    """
    Parses the purchase prices string from the .env file
    and calculates the simple average price.
    """
    if not prices_str:
        print("Error: PURCHASE_PRICES environment variable is not set.")
        return None

    try:
        # Split the string into a list of price strings
        price_list = [p for p in prices_str.strip().split(';') if p]
        
        if not price_list:
            print("Error: No prices found in PURCHASE_PRICES variable.")
            return None
            
        # Convert price strings to floats
        prices = [float(p) for p in price_list]
        
        # Calculate the simple average
        average_price = sum(prices) / len(prices)
        return average_price
        
    except ValueError:
        print(f"Error: Invalid format in PURCHASE_PRICES. Ensure it's 'price1;price2;...'. Value found: {prices_str}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred while processing prices: {e}")
        return None


def send_email(current_price, avg_purchase_price):
    """Sends an email with the XRP price and return based on average price.""" # Replace XRP by your currency
    if current_price is None:
        print("Skipping email due to price fetch error.")
        return
    
    if avg_purchase_price is None:
        print("Skipping email due to purchase processing error.")
        return

    # --- Calculations ---
    # Calculations are now based on the simple average price
    return_pct = ((current_price - avg_purchase_price) / avg_purchase_price) * 100 if avg_purchase_price > 0 else 0
    profit_per_unit = current_price - avg_purchase_price
    return_multiplier = current_price / avg_purchase_price if avg_purchase_price > 0 else 0
    
    # --- Date Formatting ---
    today_str = date.today().strftime("%d/%m/%Y")

    # --- Email Content ---
    msg = EmailMessage()
    msg['Subject'] = f'Daily XRP-EUR Report: {today_str}' # Replace XRP by your currency
    msg['From'] = SENDER_EMAIL
    msg['To'] = RECIPIENT_EMAIL
    
    # All numbers rounded for clarity
    body = f"""
Return: {return_pct:+.2f}%
Return Multiplier: x{return_multiplier:.2f}
Profit/Loss per Unit: ‚Ç¨{profit_per_unit:,.2f}

Current Price: ‚Ç¨{current_price:,.2f}
Average Purchase Price: ‚Ç¨{avg_purchase_price:,.2f}

(Report generated by bot)
üåê ¬© 2025 t.r.
    """
    msg.set_content(body)

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(SENDER_EMAIL, SENDER_PASSWORD)
            smtp.send_message(msg)
        print("Email sent successfully!")
    except Exception as e:
        print(f"Error sending email: {e}")

if __name__ == "__main__":
    # 1. Calculate the average purchase price from the history
    avg_price = calculate_average_purchase_price(PURCHASE_PRICES_STR)
    
    # 2. If the average price is valid, get the current price and send the report
    if avg_price is not None:
        current_price = get_xrp_price() # Replace XRP by your currency
        send_email(current_price, avg_price)