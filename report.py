import os
import smtplib
from email.message import EmailMessage
from coinbase.wallet.client import Client
from dotenv import load_dotenv
from datetime import date

# Load environment variables from .env file
load_dotenv()

# --- Configuration ---
COINBASE_API_KEY = os.getenv("COINBASE_API_KEY")
COINBASE_API_SECRET = os.getenv("COINBASE_API_SECRET")
SENDER_EMAIL = os.getenv("GMAIL_ADDRESS")
SENDER_PASSWORD = os.getenv("GMAIL_APP_PASSWORD")
RECIPIENT_EMAIL = os.getenv("RECIPIENT_EMAIL")
# Convert PURCHASE_PRICE to a float
PURCHASE_PRICE = float(os.getenv("PURCHASE_PRICE"))
CURRENCY_PAIR = 'XRP-EUR'

def get_xrp_price():
    """Fetches the current XRP-EUR spot price from Coinbase."""
    try:
        client = Client(COINBASE_API_KEY, COINBASE_API_SECRET)
        price_data = client.get_spot_price(currency_pair=CURRENCY_PAIR)
        return float(price_data.amount)
    except Exception as e:
        print(f"Error fetching price: {e}")
        return None

def send_email(price):
    """Sends an email with the XRP price and performance."""
    if price is None:
        print("Skipping email due to price fetch error.")
        return

    # --- Calculations ---
    # Now this calculation will work correctly
    performance_pct = ((price - PURCHASE_PRICE) / PURCHASE_PRICE) * 100
    profit_per_unit = price - PURCHASE_PRICE
    performance_multiplier = price / PURCHASE_PRICE
    
    # --- Date Formatting ---
    today_str = date.today().strftime("%d/%m/%Y")


    # --- Email Content ---
    msg = EmailMessage()
    msg['Subject'] = f'Daily XRP-EUR Report: {today_str}'
    msg['From'] = SENDER_EMAIL
    msg['To'] = RECIPIENT_EMAIL
    
    # All numbers rounded to two decimal places
    body = f"""
Performance: {performance_pct:+.2f}%
Performance Multiplier: x{performance_multiplier:.2f}
Profit/Loss per XRP: ‚Ç¨{profit_per_unit:,.2f}

Current Price: ‚Ç¨{price:,.2f}
Purchase Price: ‚Ç¨{PURCHASE_PRICE:,.2f}

(Report generated by my Python bot)
¬© üåê 2025 t.r.
    """
    msg.set_content(body)

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(SENDER_EMAIL, SENDER_PASSWORD)
            smtp.send_message(msg)
        print("Email sent successfully!")
    except Exception as e:
        print(f"Error sending email: {e}")

if __name__ == "__main__":
    current_price = get_xrp_price()
    send_email(current_price)